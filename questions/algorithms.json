[
  {
    "id": 1,
    "category": "Algorithms",
    "question": "Binary Search algoritmi nima va u qanday ishlaydi?",
    "answer": "Binary Search - bu tartiblangan massivdan elementni tez topish uchun ishlatiladigan qidiruv algoritmi. U har safar qidiruv oralig'ini 2 ga bo'lib, kerakli elementni topguncha davom etadi.\n\nAlgoritm qadamlari:\n1. O'rtadagi elementni top\n2. Agar o'rtadagi element qidirilayotgan elementdan katta bo'lsa, chapdan qidirish\n3. Agar kichik bo'lsa, o'ngdan qidirish\n4. Element topilguncha yoki oraliq tugaguncha takrorlash\n\nMisol:\n```python\ndef binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return -1\n\n# Test\narr = [1, 3, 5, 7, 9, 11, 13, 15]\ntarget = 7\nresult = binary_search(arr, target)\nprint(f'Element {target} indeksi: {result}')\n```\n\nVaqt murakkabligi: O(log n)",
    "resources": [
      {
        "title": "GeeksforGeeks - Binary Search",
        "url": "https://www.geeksforgeeks.org/binary-search/"
      }
    ]
  },
  {
    "id": 2,
    "category": "Algorithms",
    "question": "Quick Sort algoritmi nima va u qanday ishlaydi?",
    "answer": "Quick Sort - bu samarali tartiblash algoritmi bo'lib, \"bo'lib tashla va hukmronlik qil\" (divide and conquer) strategiyasidan foydalanadi.\n\nAlgoritm qadamlari:\n1. Pivot elementni tanla (odatda oxirgi element)\n2. Pivotdan kichik elementlarni chap tomonga, kattalarini o'ng tomonga joylash\n3. Chap va o'ng qismlarni rekursiv ravishda tartiblash\n\nMisol:\n```python\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    pivot = arr[-1]\n    left = []\n    right = []\n    \n    for i in range(len(arr) - 1):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    \n    return quick_sort(left) + [pivot] + quick_sort(right)\n\n# Test\narr = [64, 34, 25, 12, 22, 11, 90]\nsorted_arr = quick_sort(arr)\nprint(f'Tartiblangan massiv: {sorted_arr}')\n```\n\nVaqt murakkabligi:\n- O'rtacha holat: O(n log n)\n- Eng yomon holat: O(nÂ²)",
    "resources": [
      {
        "title": "GeeksforGeeks - Quick Sort",
        "url": "https://www.geeksforgeeks.org/quick-sort/"
      }
    ]
  }
]
